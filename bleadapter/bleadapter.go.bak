package bleadapter

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"

	cb "github.com/clearblade/Go-SDK"
	"github.com/clearblade/ble"
)

var (
	uuidFilters []string
)

const (
	deviceFiltersCollectionName = "BLE_Device_Filters"
	devicePublishTopic          = "/bleadapter/bledevice"
	msgPublishQos               = 2
	deviceManufacturerData      = "ManufacturerData"
	deviceAddress               = "Address"
	deviceAlias                 = "Alias"
	deviceUUIDs                 = "UUIDs"
)

type BleAdapter struct {
	CbDeviceClient *cb.DeviceClient

	//platformURL         string
	//messagingURL        string
	//systemKey           string
	//systemSecret        string
	//authDeviceName      string //See if we can get the edge name dynamically
	//authDeviceActiveKey string
}

func init() {
}

//Scan for ble devices
func (adapt *BleAdapter) ScanForDevices() {

	//Run an infinite loop so that scan is always being run
	for true {
		//Retrieve the UUID's to filter on
		uuidFilters := []string{}
		//uuidFilters = adapt.getDeviceFilters()
		log.Println("UUID Filters retrieved = ", uuidFilters)

		//TODO Retrieve the adapter configuration information

		//Open a connection to the System Dbus to begin scanning
		conn, err := ble.Open()
		if err != nil {
			log.Fatal(err)
		}

		//Print all the devices that were found
		for _, device := range devices {

		 	if deviceJSON, err := adapt.createBleDeviceJSON(device); err != nil {
		 		log.Printf("error marshaling device into json: %s", err.Error())
		 	} else {
		 		//fmt.Println("%v", deviceJSON)
		 		//log.Printf("Publishing message: %s", deviceJSON)
		 		//Publish each device to the "/bleadapter/bledevice" topic
		 		if err := adapt.CbDeviceClient.Publish(devicePublishTopic, deviceJSON, msgPublishQos); err != nil {
		 			log.Printf("Error occurred when publishing device to MQTT: %v", err)
		 		}
		 	}
		 }

	}
}

func (adapt *BleAdapter) getDeviceFilters() []string {
	//Retrieve the uuids that we wish to filter on
	//var query cb.Query //A nil query results in all rows being returned
	results, err := adapt.CbDeviceClient.GetDataByName(deviceFiltersCollectionName, &cb.Query{})

	dataLength := len(results["DATA"].([]interface{}))

	if err != nil || dataLength == 0 {
		log.Println("No device filters enabled.")
		return []string{}
	}

	uuids := []string{}

	for i, uuid := range results["DATA"].([]interface{}) {
		if results["DATA"].([]interface{})[i].(map[string]interface{})["enabled"].(bool) == true {
			uuids = append(uuids, uuid.(map[string]interface{})["ble_uuid"].(string))
		}
	}

	return uuids
}

func (adapt *BleAdapter) createBleDeviceJSON(device ble.Device) ([]byte, error) {

	//Create json to publish to mqtt
	//Need manufacturer data, RSSI,
	bleDevice := map[string]interface{}{}
	bleDevice[deviceAddress] = device.Address()
	bleDevice[deviceAlias] = device.Alias()
	bleDevice[deviceUUIDs] = device.UUIDs()

	bleDevice[deviceManufacturerData] = device.ManufacturerData() //Need to stringify this

	return json.Marshal(bleDevice)
}
